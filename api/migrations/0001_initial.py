# Generated by Django 3.2.12 on 2022-04-09 18:13

import api.managers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import parler.fields
import parler.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('phone', models.CharField(max_length=20, unique=True, verbose_name='Phone number')),
                ('is_staff', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', api.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=125, verbose_name='Fullname')),
                ('balance', models.FloatField(default=0.0)),
                ('coins', models.IntegerField(default=0)),
                ('client_type', models.CharField(choices=[('individual', 'Individual'), ('legal_entity', 'Legal entity')], max_length=30, null=True, verbose_name='Client type')),
                ('type_related_info', models.IntegerField(null=True, verbose_name='Related info')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='FreelancerCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default='', max_length=128)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.freelancercategory')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.IntegerField(default=0)),
                ('fullname', models.CharField(max_length=125, verbose_name='Fullname')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Elektron pochta')),
                ('passport_series', models.CharField(max_length=10, verbose_name='Passport series')),
                ('passport_number', models.CharField(max_length=20, verbose_name='Passport number')),
                ('passport_given_date', models.DateField(verbose_name='Passport given date')),
                ('passport_issued_address', models.CharField(max_length=255, verbose_name='Passport issued address')),
                ('country', models.CharField(max_length=255, verbose_name='Country')),
                ('region', models.CharField(max_length=255, verbose_name='Region')),
                ('city', models.CharField(max_length=255, verbose_name='City')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client', models.IntegerField(default=0)),
                ('fullname', models.CharField(max_length=125, verbose_name='Fullname')),
                ('company', models.CharField(max_length=255, verbose_name='Company')),
                ('bank_name', models.CharField(max_length=255, verbose_name='Bank name')),
                ('bank_account', models.CharField(max_length=255, verbose_name='Bank account')),
                ('mfo', models.CharField(max_length=255, verbose_name='MFO')),
                ('inn', models.CharField(max_length=255, verbose_name='INN')),
                ('ifut', models.CharField(blank=True, max_length=255, null=True, verbose_name='IFUT')),
                ('country', models.CharField(max_length=255, verbose_name='Country')),
                ('region', models.CharField(max_length=255, verbose_name='Region')),
                ('city', models.CharField(max_length=255, verbose_name='City')),
                ('post_code', models.CharField(max_length=20, verbose_name='Post code')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('telegram_phone', models.CharField(max_length=20, verbose_name='Telegram phone')),
                ('email', models.EmailField(max_length=255, verbose_name='Elektron pochta')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Otp',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(blank=True, max_length=8, verbose_name='Otp code')),
                ('phone', models.CharField(max_length=20, verbose_name='Phone number')),
                ('activated', models.BooleanField(default=False, verbose_name='Activated')),
                ('expires_in', models.DateTimeField(blank=True, null=True, verbose_name='Expires in')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Project title')),
                ('description', models.TextField(verbose_name='Description')),
                ('price_negotiatable', models.BooleanField(default=False)),
                ('price', models.FloatField(default=0.0)),
                ('deadline_negotiatable', models.BooleanField(default=False)),
                ('deadline', models.DateField(blank=True, null=True)),
                ('pro_task', models.BooleanField(default=False, verbose_name='Only pro accounts can see')),
                ('status', models.CharField(choices=[('unpublished', 'Not published'), ('published', 'Published'), ('working', 'Working'), ('finished', 'Not finished')], default='unpublished', max_length=30, verbose_name='Project status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.client')),
                ('freelancer_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.freelancercategory')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(default='', max_length=128)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='api.projectcategory')),
            ],
            options={
                'abstract': False,
            },
            bases=(parler.models.TranslatableModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProjectInusrancePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('bank_card', 'Bank card'), ('payme', 'Payme'), ('click', 'Click')], max_length=20)),
                ('amount', models.FloatField()),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('card_number', models.CharField(blank=True, max_length=16, null=True)),
                ('card_expiry_month', models.CharField(blank=True, max_length=2, null=True)),
                ('card_expiry_year', models.CharField(blank=True, max_length=2, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='TempFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='files/temp/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.FileField(upload_to='images/project/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='api.project')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='files/project/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='api.project')),
            ],
        ),
        migrations.AddField(
            model_name='project',
            name='insurance_payment',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.projectinusrancepayment'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.projectcategory'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='ProjectCategoryTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(default='', max_length=128)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='api.projectcategory')),
            ],
            options={
                'verbose_name': 'project category Translation',
                'db_table': 'api_projectcategory_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FreelancerCategoryTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language_code', models.CharField(db_index=True, max_length=15, verbose_name='Language')),
                ('title', models.CharField(default='', max_length=128)),
                ('master', parler.fields.TranslationsForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='api.freelancercategory')),
            ],
            options={
                'verbose_name': 'freelancer category Translation',
                'db_table': 'api_freelancercategory_translation',
                'db_tablespace': '',
                'managed': True,
                'default_permissions': (),
                'unique_together': {('language_code', 'master')},
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
    ]
